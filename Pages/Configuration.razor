@page "/configuration"
@using System.Collections.Generic
@using FuzzySharp

<h3>Configuration</h3>

<!-- Dropdown list -->
<select @bind="SelectedOption" class="form-select mb-3">
    @foreach (var option in Options)
    {
        <option value="@option">@option</option>
    }
</select>

<!-- Search box -->
<input type="text" value="@SearchTerm" @oninput="OnSearchChanged" class="form-control mb-3" placeholder="Search..." />

@if (SelectedOption == "Races")
{
    <h4>Race</h4>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <!-- Editable row for new bird -->
            <tr>
                <td>
                    <input @bind="NewRace.Name" class="form-control" placeholder="Race name" />
                </td>
                <td>
                    <input @bind="NewRace.Date" class="form-control" placeholder="Race date" />
                </td>
                <td>
                    <button class="btn btn-success" @onclick="AddRace">Add</button>
                </td>
            </tr>

            @foreach (var race in FilteredRaces)
            {
                <tr>
                    <td>@race.Name</td>
                    <td>@race.Date</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (SelectedOption == "Clubs")
{
    <h4>Registered Clubs</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Location</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var club in FilteredClubs)
            {
                <tr>
                    <td>@club.Id</td>
                    <td>@club.Name</td>
                    <td>@club.Location</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private void OnSearchChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private string SelectedOption = "Races";
    private string SearchTerm = "";

    private List<string> Options = new() { "Races", "Clubs" };

    private List<Race> Races = new()
{
new Race { Name = "Bloemhof1", Date = "BB" },
new Race { Name = "Bloemhof2", Date = "ANDA" },
};

    private List<Club> Clubs = new()
{
new Club { Id = "NDKD", Name = "Noordheuwel Duiwe Klub", Location = "Noordheuwel" },
new Club { Id = "CPT", Name = "Cape Town", Location = "Cape Town" },
};

    private class Race
    {
        public string Name { get; set; } = string.Empty;
        public string Date { get; set; } = string.Empty;
    }

    private class Club
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
    }

    private Race NewRace = new();
    private Club NewClub = new();

    private void AddRace()
    {
        if (!string.IsNullOrWhiteSpace(NewRace.Name))
        {
            Races.Add(new Race
            {
                Name = NewRace.Name,
                Date = NewRace.Date,
            });

            NewRace = new();
        }
    }

    private void AddClub()
    {
        if (!string.IsNullOrWhiteSpace(NewClub.Id))
        {
            Clubs.Add(new Club
            {
                Id = NewClub.Id,
                Name = NewClub.Name,
                Location = NewClub.Location
            });

            NewClub = new();
        }
    }


    private bool IsFuzzyMatch(string combinedText, string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(combinedText) || string.IsNullOrWhiteSpace(searchTerm))
            return false;

        int score = Fuzz.PartialRatio(combinedText.ToLower(), searchTerm.ToLower());
        return score >= 70;
    }

    private IEnumerable<Race> FilteredRaces =>
    string.IsNullOrWhiteSpace(SearchTerm)
    ? Races
    : Races.Where(r => IsFuzzyMatch($"{r.Name} {r.Date}", SearchTerm));

    private IEnumerable<Club> FilteredClubs =>
    string.IsNullOrWhiteSpace(SearchTerm)
    ? Clubs
    : Clubs.Where(c => IsFuzzyMatch($"{c.Id}{c.Name}{c.Location}", SearchTerm)
    );

}