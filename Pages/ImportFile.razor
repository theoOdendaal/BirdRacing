@page "/importfile"

<PageTitle>Import File</PageTitle>

<h1>Import File:</h1>

<InputFile OnChange="HandleFileSelected" />

@* <p role="status">Current count: @currentCount</p> *@

@* <button class="btn btn-primary" @onclick="IncrementCount">Click me</button> *@

@code {    
    @using ExcelDataReader;
    @using DataModels;
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        // Handle file import logic here
        var file = e.File;
        var fileName = file.Name;
        var filePath = Path.Combine(Environment.CurrentDirectory, "Uploads", fileName);

        //to be comment out
        Console.WriteLine($"File selected: {fileName}");

        // Limit file size for reading (e.g., 10 MB)
        const long maxFileSize = 10 * 1024 * 1024;
        using var stream = file.OpenReadStream(maxFileSize);

        // Use a library like ExcelDataReader to read XLS files
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        memoryStream.Position = 0;

        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

        using var reader = ExcelDataReader.ExcelReaderFactory.CreateReader(memoryStream);
        var result = reader.AsDataSet();

        // Example: Read first sheet and print cell values
        var table = result.Tables[0];

        List<List<string>> filterData = new List<List<string>>();

        for (int row = 0; row < table.Rows.Count; row++)
        {
            List<string> rowValues = new List<string>();
            for (int col = 0; col < table.Columns.Count; col++)
            {
                var cellValue = table.Rows[row][col]?.ToString();
                if (!string.IsNullOrEmpty(cellValue))
                {
                    rowValues.Add(cellValue);
                }                
            }

            if (rowValues.Count > 0)
            {
                filterData.Add(rowValues);
            }
        }        

        @* string[,] dataArray = new string[filterData.Count, filterData.Count > 0 ? filterData[0].Count : 0];
        for (int i = 0; i < filterData.Count; i++)
        {
            for (int j = 0; j < filterData[i].Count; j++)
            {
                dataArray[i, j] = filterData[i][j];
            }
        } *@

        //to be comment out
        int counter = 0;
        foreach (var row in filterData)
        {
            counter = 0;
            foreach (var cell in row)
            {
                Console.Write($"[{counter}]{cell}\t");
                counter++;
            }
            Console.WriteLine();
        }

        RaceImportFile raceImportFile = new RaceImportFile();

        raceImportFile.FileName = fileName;
        raceImportFile.FilePath = filePath;
        raceImportFile.ImportDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        raceImportFile.ImportStatus = "Pending";
        raceImportFile.ErrorMessage = string.Empty;
        raceImportFile.Data = new List<RaceData>();
        
        var fileClubName = string.Empty;
        var fileClubArea = string.Empty;

        if (filterData[0].Count > 0)
        {
            fileClubName = filterData[0][0];
            filterData.RemoveAt(0);
        }

        if (filterData[0].Count > 0)
        {
            fileClubArea = filterData[0][0];
            filterData.RemoveAt(0);
        }

        //read 3de row*******************************
        if (filterData[0].Count > 0)
        {
            filterData.RemoveAt(0);
        }

        List<string> headerRows = new List<string>();

        if (filterData[0].Count > 0)
        {
            foreach (var cell in filterData[0])
            {
                headerRows.Add(cell.ToLower());
            }
            filterData.RemoveAt(0);
        }

        //to be comment out
        counter= 0;
        Console.WriteLine($"Header:");
        foreach (var header in headerRows)
        {            
            Console.Write($"[{counter}]{header}\t");
            counter++;
        }
        Console.WriteLine();

        if (filterData.Count > 1)
        {
            filterData.RemoveRange(filterData.Count - 1, 1); // Remove the last row
        }
        else
        {
            filterData.Clear();
        }

        foreach (var row in filterData)
        {
            try
            {
                int index = 0;
                RaceData raceData = new RaceData();

                if(headerRows.Contains("pos"))
                {
                    if (int.TryParse(row[index], out int position))
                    {
                        raceData.Position = position;
                        index++;
                    }
                    else
                    {
                        raceData.Position = 0; // Default value if parsing fails
                    }                
                }

                if(headerRows.Contains("loft name"))
                {
                    if(!string.IsNullOrEmpty(row[index]))
                    {
                        raceData.LoftName = row[index++];
                    }
                    else
                    {
                        raceData.LoftName = "Unknown"; // Default value if empty
                        index++;
                    }

                    if(!string.IsNullOrEmpty(row[index]))
                    {
                        raceData.ClubId = row[index++];
                    }
                    else
                    {
                        raceData.LoftName = "Unknown"; // Default value if empty
                        index++;
                    }
                }

                if(headerRows.Contains("bird particulars"))
                {
                    if(int.TryParse(row[index], out int ringYear))
                    {
                        raceData.RingYear = ringYear;
                        index++;
                    }
                    else
                    {
                        raceData.RingYear = 0; // Default value if parsing fails
                    }                    

                    raceData.BirdId = row[index++];

                    if (row[index] != "H" && row[index] != "C")
                    {
                        raceData.BirdColor = row[index++];
                    }
                    else
                    {
                        raceData.BirdColor = "Unknown"; // Default value if parsing fails
                        index++;
                    }

                    raceData.BirdSex = row[index++];
                }

                if(headerRows.Contains("clock time"))
                {
                    if (DateTime.TryParse(row[index], out DateTime timeOfArrival))
                    {
                        raceData.TimeOfArrival = timeOfArrival;
                        index++;
                    }
                    else
                    {
                        raceData.TimeOfArrival = DateTime.MinValue; // Default value if parsing fails
                    }
                }

                if(headerRows.Contains("var"))
                {
                    index++; // Skip the 'var' column
                }

                if(headerRows.Contains("distance"))
                {
                    if (float.TryParse(row[index], out float distance))
                    {
                        raceData.Distance = distance;
                        index++;
                    }
                    else
                    {
                        raceData.Distance = 0f; // Default value if parsing fails
                    }
                }

                if(headerRows.Contains("velocity"))
                {
                    if (float.TryParse(row[index], out float velocity))
                    {
                        raceData.Velocity = velocity;
                        index++;
                    }
                    else
                    {
                        raceData.Velocity = 0f; // Default value if parsing fails
                    }
                }

                raceImportFile.Data.Add(raceData);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing row: {ex.Message}");
                continue; // Skip this row if there's an error
            }            
        }

        //to be comment out
        foreach (var raceData in raceImportFile.Data)
        {
            Console.WriteLine($"Position: {raceData.Position}");
            Console.WriteLine($"LoftName: {raceData.LoftName}");
            Console.WriteLine($"ClubId: {raceData.ClubId}");
            Console.WriteLine($"RingYear: {raceData.RingYear}");
            Console.WriteLine($"BirdId: {raceData.BirdId}");
            Console.WriteLine($"BirdColor: {raceData.BirdColor}");
            Console.WriteLine($"BirdSex: {raceData.BirdSex}");
            Console.WriteLine($"TimeOfArrival: {raceData.TimeOfArrival}");
            Console.WriteLine($"Distance: {raceData.Distance}");
            Console.WriteLine($"Velocity: {raceData.Velocity}");
            Console.WriteLine("-----------------------------");
        }
    
    }
}
